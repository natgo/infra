---

- name: Add docker repo
  block:
    - name: Check if the key exists
      ansible.builtin.stat:
        path: /etc/apt/trusted.gpg.d/docker.gpg
      register: docker_signing_key

    - name: Download the signing key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker
        mode: 0644
      when: not docker_signing_key.stat.exists

    - name: Dearmor the key
      ansible.builtin.command: gpg --dearmor /etc/apt/trusted.gpg.d/docker
      when: not docker_signing_key.stat.exists

    - name: Remove temp key
      ansible.builtin.file:
        dest: /etc/apt/trusted.gpg.d/docker
        state: absent
      when: not docker_signing_key.stat.exists

    - name: Add the repo to sources
      ansible.builtin.template:
        src: "docker_repo.j2"
        dest: /etc/apt/sources.list.d/docker.list
        mode: 0644

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true


- name: Install Docker
  when: ansible_facts['os_family'] == 'Debian'
  ansible.builtin.apt:
    name: "{{ docker_packages }}"
    state: present

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: true

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Make /srv user writeable
  ansible.builtin.file:
    path: /srv
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Make {{ docker_dir }} directory
  become: false
  ansible.builtin.file:
    path: "{{ docker_dir }}"
    state: directory
    mode: "0770"

- name: Create the swag network
  community.docker.docker_network:
    name: swag
    ipam_config:
      - subnet: "{{ swag_network }}"

- name: Create the minecraft network
  community.docker.docker_network:
    name: minecraft
    ipam_config:
      - subnet: "{{ minecraft_network }}"

# - name: Handle persistent data
#   become: no
#   when: "enable_nas_stuff | default(False)"
#   block:
#   - name: Check if the persistent data folder exists on the remote machine
#     stat:
#       path: "{{ docker_dir }}"
#     register: persistent_data
#     when: "enable_nas_stuff | default(False)"
#
#   - name: Check if the persistent data folder is empty
#     find:
#       paths:
#         - "{{ docker_dir }}/"
#       recurse: yes
#     register: persistent_data_find
#     when: "enable_nas_stuff | default(False)"
#
#   - name: Create the persistent data folder on the remote machine
#     file:
#       dest: "{{ docker_dir }}"
#       state: directory
#       owner: "{{ username }}"
#       group: "users"
#       mode: "ug=rwx,o=rx,g+s"
#       recurse: yes
#     when: not persistent_data.stat.exists
#
# - name: Chmod the data folder
#   become: yes
#   file:
#     dest: "{{ docker_dir }}"
#     state: directory
#     owner: "{{ username }}"
#     mode: "0775"
#     group: "users"
#     recurse: yes
