---
- name: Make {{ docker_dir }}/{{ container_name }} directory
  become: false
  ansible.builtin.file:
    path: "{{ docker_dir }}/{{ container_name }}"
    state: directory
    mode: "0770"

- name: Create a nextcloud network
  community.docker.docker_network:
    name: nextcloud_network
    ipam_config:
      - subnet: "{{ nextcloud_network }}"

- name: Make sure the MariaDB container is created and running
  community.docker.docker_container:
    name: 'nextcloud-mariadb'
    image: 'docker.io/mariadb:latest'
    networks:
      - name: nextcloud_network
        ipv4_address: "{{ mariadb_ip_address }}"
    command: '--transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed'
    state: 'started'
    env:
      'PUID': '{{ guid }}'
      'PGID': '{{ guid }}'
      'TZ': '{{ timezone }}'
      'MYSQL_ROOT_PASSWORD': '{{ mysql_root_password }}'
    volumes:
      - '{{ docker_dir }}/{{ container_name }}/mariadb/mysql:/var/lib/mysql'
    restart_policy: unless-stopped

# - name: Make sure the Redis container is created and running
#  community.docker.docker_container:
#    name: 'nextcloud-redis'
#    network:
#      - nextcloud_network
#    ip: "{{ redis_ip_address }}"
#    image: 'redis:alpine'
#    state: 'started'
#    restart_policy: unless-stopped

- name: Make sure the Nextcloud container is created and running
  community.docker.docker_container:
    name: '{{ container_name }}'
    image: 'lscr.io/linuxserver/nextcloud'
    networks:
      - name: nextcloud_network
        ipv4_address: "{{ nextcloud_ip_address }}"
    state: 'started'
    env:
      'PUID': '{{ guid }}'
      'PGID': '{{ guid }}'
      'TZ': '{{ timezone }}'
      'MYSQL_DATABASE': '{{ mysql_db }}'
      'MYSQL_USER': '{{ mysql_user }}'
      'MYSQL_PASSWORD': '{{ mysql_nextcloud_password }}'
      'MYSQL_HOST': "{{ mariadb_ip_address }}"
    volumes:
      - '{{ docker_dir }}/{{ container_name }}/config:/config'
      - '{{ docker_dir }}/{{ container_name }}/data:/data'
    restart_policy: unless-stopped
